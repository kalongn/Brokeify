// This file contains utility functions and constants for handling scenarios in the application.

// This is generated by an AI, autocompleted after writing the first few lines.
export const stateMap = {
    "AL": "Alabama",
    "AK": "Alaska",
    "AZ": "Arizona",
    "AR": "Arkansas",
    "CA": "California",
    "CO": "Colorado",
    "CT": "Connecticut",
    "DE": "Delaware",
    "FL": "Florida",
    "GA": "Georgia",
    "HI": "Hawaii",
    "ID": "Idaho",
    "IL": "Illinois",
    "IN": "Indiana",
    "IA": "Iowa",
    "KS": "Kansas",
    "KY": "Kentucky",
    "LA": "Louisiana",
    "ME": "Maine",
    "MD": "Maryland",
    "MA": "Massachusetts",
    "MI": "Michigan",
    "MN": "Minnesota",
    "MS": "Mississippi",
    "MO": "Missouri",
    "MT": "Montana",
    "NE": "Nebraska",
    "NV": "Nevada",
    "NH": "New Hampshire",
    "NJ": "New Jersey",
    "NM": "New Mexico",
    "NY": "New York",
    "NC": "North Carolina",
    "ND": "North Dakota",
    "OH": "Ohio",
    "OK": "Oklahoma",
    "OR": "Oregon",
    "PA": "Pennsylvania",
    "RI": "Rhode Island",
    "SC": "South Carolina",
    "SD": "South Dakota",
    "TN": "Tennessee",
    "TX": "Texas",
    "UT": "Utah",
    "VT": "Vermont",
    "VA": "Virginia",
    "WA": "Washington",
    "WV": "West Virginia",
    "WI": "Wisconsin",
    "WY": "Wyoming"
};

export const distributionToString = (distribution) => {
    switch (distribution.distributionType) {
        case "FIXED_AMOUNT":
            return `${distribution.value}`;
        case "FIXED_PERCENTAGE":
            return `${distribution.value * 100}%`;
        case "UNIFORM_AMOUNT":
            return `[${distribution.lowerBound}, ${distribution.upperBound}]`;
        case "UNIFORM_PERCENTAGE":
            return `[${distribution.lowerBound * 100}%, ${distribution.upperBound * 100}%]`;
        case "NORMAL_AMOUNT":
            return `μ: ${distribution.mean}, σ: ${distribution.standardDeviation}`;
        case "NORMAL_PERCENTAGE":
            return `μ: ${distribution.mean * 100}%, σ: ${distribution.standardDeviation * 100}%`;
        default:
            return "Unknown Distribution Type";
    }
};

export const validateRequired = (newErrors, field, value) => {
  if (value === null || value === undefined) {
    newErrors[field] = "This field is required";
  } else if (typeof value === "string" && value.trim() === "") {
    newErrors[field] = "This field is required";
  } else if (typeof value === "number" && value < 0) {
    newErrors[field] = "Value must be non-negative";
  }
  // if(bound1 !== null && bound2 !== null) {
  //   newErrors[field] = `This value must be between ${bound1} and ${bound2}`;
  // }
  return newErrors;
} 


export const validateDistribution = (newErrors, field, dist, isPercentage) => {
  // Check if a type of distribution has been selected
  const type = dist.type;
  if (type === null || type === undefined) {
    newErrors[field] = "This field is required";
    return;
  }
  
  switch(type) {
    case "fixed":
      if (dist.fixedValue === null || dist.fixedValue === undefined) {
        newErrors[field] = "This field is required";
      } else if (dist.fixedValue < 0) {
        newErrors[field] = "Value must be non-negative";
      }
      if (isPercentage && dist.fixedValue > 100) {
        newErrors[field] = "Percentage must be between 0 and 100";
      }
      break;
    case "uniform":
      if ((dist.lowerBound === null || dist.upperBound === null) || (dist.lowerBound === undefined || dist.upperBound === undefined)) {
        newErrors[field] = "Both lower and upper bounds are required";
      } else if (dist.lowerBound < 0 || dist.upperBound < 0) {
        newErrors[field] = "Bounds must be non-negative";
      } else if (dist.lowerBound > dist.upperBound) {
        newErrors[field] = "Lower bound must be less than or equal to upper bound";
      }
      break;
    case "normal":
      if ((dist.mean === null || dist.stdDev === null) || (dist.mean === undefined || dist.stdDev === undefined)) {
        newErrors[field] = "Both mean and standard deviation are required";
      } else if (dist.mean < 0 || dist.stdDev < 0) {
        newErrors[field] = "Both mean and standard deviation must be non-negative";
      } else if (isPercentage) {
        if (dist.mean > 100) {
          newErrors[field] = "Mean must be between 0 and 100";
        }
        // If too large, significant portions of the distribution will fall outside the range
        // Normal distributions should have 99.7% of values fall within 3 * stdDev
        const maxStdDev = Math.min(dist.mean / 3, (100 - dist.mean) / 3);
        if (dist.stdDev > maxStdDev) {
          newErrors[field] = "Standard deviation is too large (99.7% of values must stay within [0, 100]).";
        }
      }
      break;
    default:
      break;
  }
  return newErrors;
};